// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {

namespace {

const ::google::protobuf::Descriptor* ChatPkt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatPkt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelChatPkt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelChatPkt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChatPkt_descriptor_ = file->message_type(0);
  static const int ChatPkt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPkt, send_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPkt, recv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPkt, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPkt, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPkt, send_name_),
  };
  ChatPkt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatPkt_descriptor_,
      ChatPkt::default_instance_,
      ChatPkt_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatPkt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPkt, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPkt, _is_default_instance_));
  ChannelChatPkt_descriptor_ = file->message_type(1);
  static const int ChannelChatPkt_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelChatPkt, send_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelChatPkt, recv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelChatPkt, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelChatPkt, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelChatPkt, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelChatPkt, send_name_),
  };
  ChannelChatPkt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelChatPkt_descriptor_,
      ChannelChatPkt::default_instance_,
      ChannelChatPkt_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelChatPkt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelChatPkt, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelChatPkt, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatPkt_descriptor_, &ChatPkt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelChatPkt_descriptor_, &ChannelChatPkt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete ChatPkt::default_instance_;
  delete ChatPkt_reflection_;
  delete ChannelChatPkt::default_instance_;
  delete ChannelChatPkt_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\002IM\"b\n\007ChatPkt\022\017\n\007send_id\030\001"
    " \001(\003\022\017\n\007recv_id\030\002 \001(\003\022\017\n\007content\030\003 \001(\014\022\021"
    "\n\tsend_time\030\004 \001(\t\022\021\n\tsend_name\030\005 \001(\t\"}\n\016"
    "ChannelChatPkt\022\017\n\007send_id\030\001 \001(\003\022\017\n\007recv_"
    "id\030\002 \001(\003\022\022\n\nchannel_id\030\003 \001(\005\022\017\n\007content\030"
    "\004 \001(\014\022\021\n\tsend_time\030\005 \001(\t\022\021\n\tsend_name\030\006 "
    "\001(\tb\006proto3", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  ChatPkt::default_instance_ = new ChatPkt();
  ChannelChatPkt::default_instance_ = new ChannelChatPkt();
  ChatPkt::default_instance_->InitAsDefaultInstance();
  ChannelChatPkt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatPkt::kSendIdFieldNumber;
const int ChatPkt::kRecvIdFieldNumber;
const int ChatPkt::kContentFieldNumber;
const int ChatPkt::kSendTimeFieldNumber;
const int ChatPkt::kSendNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatPkt::ChatPkt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.ChatPkt)
}

void ChatPkt::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatPkt::ChatPkt(const ChatPkt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.ChatPkt)
}

void ChatPkt::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  send_id_ = GOOGLE_LONGLONG(0);
  recv_id_ = GOOGLE_LONGLONG(0);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatPkt::~ChatPkt() {
  // @@protoc_insertion_point(destructor:IM.ChatPkt)
  SharedDtor();
}

void ChatPkt::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatPkt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatPkt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatPkt_descriptor_;
}

const ChatPkt& ChatPkt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChatPkt* ChatPkt::default_instance_ = NULL;

ChatPkt* ChatPkt::New(::google::protobuf::Arena* arena) const {
  ChatPkt* n = new ChatPkt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatPkt::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChatPkt*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(send_id_, recv_id_);
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ChatPkt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.ChatPkt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 send_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recv_id;
        break;
      }

      // optional int64 recv_id = 2;
      case 2: {
        if (tag == 16) {
         parse_recv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recv_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_send_time;
        break;
      }

      // optional string send_time = 4;
      case 4: {
        if (tag == 34) {
         parse_send_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->send_time().data(), this->send_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.ChatPkt.send_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_send_name;
        break;
      }

      // optional string send_name = 5;
      case 5: {
        if (tag == 42) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->send_name().data(), this->send_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.ChatPkt.send_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.ChatPkt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.ChatPkt)
  return false;
#undef DO_
}

void ChatPkt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.ChatPkt)
  // optional int64 send_id = 1;
  if (this->send_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->send_id(), output);
  }

  // optional int64 recv_id = 2;
  if (this->recv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recv_id(), output);
  }

  // optional bytes content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // optional string send_time = 4;
  if (this->send_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_time().data(), this->send_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChatPkt.send_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->send_time(), output);
  }

  // optional string send_name = 5;
  if (this->send_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChatPkt.send_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->send_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.ChatPkt)
}

::google::protobuf::uint8* ChatPkt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.ChatPkt)
  // optional int64 send_id = 1;
  if (this->send_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->send_id(), target);
  }

  // optional int64 recv_id = 2;
  if (this->recv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recv_id(), target);
  }

  // optional bytes content = 3;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // optional string send_time = 4;
  if (this->send_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_time().data(), this->send_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChatPkt.send_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->send_time(), target);
  }

  // optional string send_name = 5;
  if (this->send_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChatPkt.send_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->send_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.ChatPkt)
  return target;
}

int ChatPkt::ByteSize() const {
  int total_size = 0;

  // optional int64 send_id = 1;
  if (this->send_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_id());
  }

  // optional int64 recv_id = 2;
  if (this->recv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->recv_id());
  }

  // optional bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // optional string send_time = 4;
  if (this->send_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_time());
  }

  // optional string send_name = 5;
  if (this->send_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatPkt::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChatPkt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatPkt>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatPkt::MergeFrom(const ChatPkt& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.send_id() != 0) {
    set_send_id(from.send_id());
  }
  if (from.recv_id() != 0) {
    set_recv_id(from.recv_id());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.send_time().size() > 0) {

    send_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_time_);
  }
  if (from.send_name().size() > 0) {

    send_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_name_);
  }
}

void ChatPkt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPkt::CopyFrom(const ChatPkt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPkt::IsInitialized() const {

  return true;
}

void ChatPkt::Swap(ChatPkt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatPkt::InternalSwap(ChatPkt* other) {
  std::swap(send_id_, other->send_id_);
  std::swap(recv_id_, other->recv_id_);
  content_.Swap(&other->content_);
  send_time_.Swap(&other->send_time_);
  send_name_.Swap(&other->send_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatPkt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatPkt_descriptor_;
  metadata.reflection = ChatPkt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatPkt

// optional int64 send_id = 1;
void ChatPkt::clear_send_id() {
  send_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChatPkt::send_id() const {
  // @@protoc_insertion_point(field_get:IM.ChatPkt.send_id)
  return send_id_;
}
 void ChatPkt::set_send_id(::google::protobuf::int64 value) {
  
  send_id_ = value;
  // @@protoc_insertion_point(field_set:IM.ChatPkt.send_id)
}

// optional int64 recv_id = 2;
void ChatPkt::clear_recv_id() {
  recv_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChatPkt::recv_id() const {
  // @@protoc_insertion_point(field_get:IM.ChatPkt.recv_id)
  return recv_id_;
}
 void ChatPkt::set_recv_id(::google::protobuf::int64 value) {
  
  recv_id_ = value;
  // @@protoc_insertion_point(field_set:IM.ChatPkt.recv_id)
}

// optional bytes content = 3;
void ChatPkt::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatPkt::content() const {
  // @@protoc_insertion_point(field_get:IM.ChatPkt.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatPkt::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ChatPkt.content)
}
 void ChatPkt::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ChatPkt.content)
}
 void ChatPkt::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ChatPkt.content)
}
 ::std::string* ChatPkt::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:IM.ChatPkt.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatPkt::release_content() {
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatPkt::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:IM.ChatPkt.content)
}

// optional string send_time = 4;
void ChatPkt::clear_send_time() {
  send_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatPkt::send_time() const {
  // @@protoc_insertion_point(field_get:IM.ChatPkt.send_time)
  return send_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatPkt::set_send_time(const ::std::string& value) {
  
  send_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ChatPkt.send_time)
}
 void ChatPkt::set_send_time(const char* value) {
  
  send_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ChatPkt.send_time)
}
 void ChatPkt::set_send_time(const char* value, size_t size) {
  
  send_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ChatPkt.send_time)
}
 ::std::string* ChatPkt::mutable_send_time() {
  
  // @@protoc_insertion_point(field_mutable:IM.ChatPkt.send_time)
  return send_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatPkt::release_send_time() {
  
  return send_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatPkt::set_allocated_send_time(::std::string* send_time) {
  if (send_time != NULL) {
    
  } else {
    
  }
  send_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_time);
  // @@protoc_insertion_point(field_set_allocated:IM.ChatPkt.send_time)
}

// optional string send_name = 5;
void ChatPkt::clear_send_name() {
  send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatPkt::send_name() const {
  // @@protoc_insertion_point(field_get:IM.ChatPkt.send_name)
  return send_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatPkt::set_send_name(const ::std::string& value) {
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ChatPkt.send_name)
}
 void ChatPkt::set_send_name(const char* value) {
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ChatPkt.send_name)
}
 void ChatPkt::set_send_name(const char* value, size_t size) {
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ChatPkt.send_name)
}
 ::std::string* ChatPkt::mutable_send_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.ChatPkt.send_name)
  return send_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatPkt::release_send_name() {
  
  return send_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatPkt::set_allocated_send_name(::std::string* send_name) {
  if (send_name != NULL) {
    
  } else {
    
  }
  send_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_name);
  // @@protoc_insertion_point(field_set_allocated:IM.ChatPkt.send_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelChatPkt::kSendIdFieldNumber;
const int ChannelChatPkt::kRecvIdFieldNumber;
const int ChannelChatPkt::kChannelIdFieldNumber;
const int ChannelChatPkt::kContentFieldNumber;
const int ChannelChatPkt::kSendTimeFieldNumber;
const int ChannelChatPkt::kSendNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelChatPkt::ChannelChatPkt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.ChannelChatPkt)
}

void ChannelChatPkt::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChannelChatPkt::ChannelChatPkt(const ChannelChatPkt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.ChannelChatPkt)
}

void ChannelChatPkt::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  send_id_ = GOOGLE_LONGLONG(0);
  recv_id_ = GOOGLE_LONGLONG(0);
  channel_id_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChannelChatPkt::~ChannelChatPkt() {
  // @@protoc_insertion_point(destructor:IM.ChannelChatPkt)
  SharedDtor();
}

void ChannelChatPkt::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChannelChatPkt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelChatPkt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelChatPkt_descriptor_;
}

const ChannelChatPkt& ChannelChatPkt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

ChannelChatPkt* ChannelChatPkt::default_instance_ = NULL;

ChannelChatPkt* ChannelChatPkt::New(::google::protobuf::Arena* arena) const {
  ChannelChatPkt* n = new ChannelChatPkt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelChatPkt::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChannelChatPkt*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(send_id_, recv_id_);
  channel_id_ = 0;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ChannelChatPkt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.ChannelChatPkt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 send_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recv_id;
        break;
      }

      // optional int64 recv_id = 2;
      case 2: {
        if (tag == 16) {
         parse_recv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recv_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional int32 channel_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_send_time;
        break;
      }

      // optional string send_time = 5;
      case 5: {
        if (tag == 42) {
         parse_send_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->send_time().data(), this->send_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.ChannelChatPkt.send_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_send_name;
        break;
      }

      // optional string send_name = 6;
      case 6: {
        if (tag == 50) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->send_name().data(), this->send_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.ChannelChatPkt.send_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.ChannelChatPkt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.ChannelChatPkt)
  return false;
#undef DO_
}

void ChannelChatPkt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.ChannelChatPkt)
  // optional int64 send_id = 1;
  if (this->send_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->send_id(), output);
  }

  // optional int64 recv_id = 2;
  if (this->recv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recv_id(), output);
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_id(), output);
  }

  // optional bytes content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // optional string send_time = 5;
  if (this->send_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_time().data(), this->send_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChannelChatPkt.send_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->send_time(), output);
  }

  // optional string send_name = 6;
  if (this->send_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChannelChatPkt.send_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->send_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.ChannelChatPkt)
}

::google::protobuf::uint8* ChannelChatPkt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.ChannelChatPkt)
  // optional int64 send_id = 1;
  if (this->send_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->send_id(), target);
  }

  // optional int64 recv_id = 2;
  if (this->recv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recv_id(), target);
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel_id(), target);
  }

  // optional bytes content = 4;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional string send_time = 5;
  if (this->send_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_time().data(), this->send_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChannelChatPkt.send_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->send_time(), target);
  }

  // optional string send_name = 6;
  if (this->send_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChannelChatPkt.send_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->send_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.ChannelChatPkt)
  return target;
}

int ChannelChatPkt::ByteSize() const {
  int total_size = 0;

  // optional int64 send_id = 1;
  if (this->send_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_id());
  }

  // optional int64 recv_id = 2;
  if (this->recv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->recv_id());
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_id());
  }

  // optional bytes content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // optional string send_time = 5;
  if (this->send_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_time());
  }

  // optional string send_name = 6;
  if (this->send_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelChatPkt::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelChatPkt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelChatPkt>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelChatPkt::MergeFrom(const ChannelChatPkt& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.send_id() != 0) {
    set_send_id(from.send_id());
  }
  if (from.recv_id() != 0) {
    set_recv_id(from.recv_id());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.send_time().size() > 0) {

    send_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_time_);
  }
  if (from.send_name().size() > 0) {

    send_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_name_);
  }
}

void ChannelChatPkt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelChatPkt::CopyFrom(const ChannelChatPkt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelChatPkt::IsInitialized() const {

  return true;
}

void ChannelChatPkt::Swap(ChannelChatPkt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelChatPkt::InternalSwap(ChannelChatPkt* other) {
  std::swap(send_id_, other->send_id_);
  std::swap(recv_id_, other->recv_id_);
  std::swap(channel_id_, other->channel_id_);
  content_.Swap(&other->content_);
  send_time_.Swap(&other->send_time_);
  send_name_.Swap(&other->send_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelChatPkt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelChatPkt_descriptor_;
  metadata.reflection = ChannelChatPkt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelChatPkt

// optional int64 send_id = 1;
void ChannelChatPkt::clear_send_id() {
  send_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChannelChatPkt::send_id() const {
  // @@protoc_insertion_point(field_get:IM.ChannelChatPkt.send_id)
  return send_id_;
}
 void ChannelChatPkt::set_send_id(::google::protobuf::int64 value) {
  
  send_id_ = value;
  // @@protoc_insertion_point(field_set:IM.ChannelChatPkt.send_id)
}

// optional int64 recv_id = 2;
void ChannelChatPkt::clear_recv_id() {
  recv_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChannelChatPkt::recv_id() const {
  // @@protoc_insertion_point(field_get:IM.ChannelChatPkt.recv_id)
  return recv_id_;
}
 void ChannelChatPkt::set_recv_id(::google::protobuf::int64 value) {
  
  recv_id_ = value;
  // @@protoc_insertion_point(field_set:IM.ChannelChatPkt.recv_id)
}

// optional int32 channel_id = 3;
void ChannelChatPkt::clear_channel_id() {
  channel_id_ = 0;
}
 ::google::protobuf::int32 ChannelChatPkt::channel_id() const {
  // @@protoc_insertion_point(field_get:IM.ChannelChatPkt.channel_id)
  return channel_id_;
}
 void ChannelChatPkt::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:IM.ChannelChatPkt.channel_id)
}

// optional bytes content = 4;
void ChannelChatPkt::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChannelChatPkt::content() const {
  // @@protoc_insertion_point(field_get:IM.ChannelChatPkt.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelChatPkt::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ChannelChatPkt.content)
}
 void ChannelChatPkt::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ChannelChatPkt.content)
}
 void ChannelChatPkt::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ChannelChatPkt.content)
}
 ::std::string* ChannelChatPkt::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:IM.ChannelChatPkt.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChannelChatPkt::release_content() {
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelChatPkt::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:IM.ChannelChatPkt.content)
}

// optional string send_time = 5;
void ChannelChatPkt::clear_send_time() {
  send_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChannelChatPkt::send_time() const {
  // @@protoc_insertion_point(field_get:IM.ChannelChatPkt.send_time)
  return send_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelChatPkt::set_send_time(const ::std::string& value) {
  
  send_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ChannelChatPkt.send_time)
}
 void ChannelChatPkt::set_send_time(const char* value) {
  
  send_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ChannelChatPkt.send_time)
}
 void ChannelChatPkt::set_send_time(const char* value, size_t size) {
  
  send_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ChannelChatPkt.send_time)
}
 ::std::string* ChannelChatPkt::mutable_send_time() {
  
  // @@protoc_insertion_point(field_mutable:IM.ChannelChatPkt.send_time)
  return send_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChannelChatPkt::release_send_time() {
  
  return send_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelChatPkt::set_allocated_send_time(::std::string* send_time) {
  if (send_time != NULL) {
    
  } else {
    
  }
  send_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_time);
  // @@protoc_insertion_point(field_set_allocated:IM.ChannelChatPkt.send_time)
}

// optional string send_name = 6;
void ChannelChatPkt::clear_send_name() {
  send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChannelChatPkt::send_name() const {
  // @@protoc_insertion_point(field_get:IM.ChannelChatPkt.send_name)
  return send_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelChatPkt::set_send_name(const ::std::string& value) {
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ChannelChatPkt.send_name)
}
 void ChannelChatPkt::set_send_name(const char* value) {
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ChannelChatPkt.send_name)
}
 void ChannelChatPkt::set_send_name(const char* value, size_t size) {
  
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ChannelChatPkt.send_name)
}
 ::std::string* ChannelChatPkt::mutable_send_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.ChannelChatPkt.send_name)
  return send_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChannelChatPkt::release_send_name() {
  
  return send_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelChatPkt::set_allocated_send_name(::std::string* send_name) {
  if (send_name != NULL) {
    
  } else {
    
  }
  send_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_name);
  // @@protoc_insertion_point(field_set_allocated:IM.ChannelChatPkt.send_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)
